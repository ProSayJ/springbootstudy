package com.sinopec.fpms.platform.controller;


import com.alibaba.fastjson.JSONArray;
import com.sinopec.fpms.platform.annotation.SysLog;
import com.sinopec.fpms.platform.controller.base.BaseController;

import com.sinopec.fpms.platform.entity.ResultMsg;
import com.sinopec.fpms.platform.entity.T01File;
import com.sinopec.fpms.platform.ppt.model.*;
import com.sinopec.fpms.platform.ppt.service.PPTManagerService;

import com.sinopec.fpms.platform.ppt.util.PowerPointGenerator;
import com.sinopec.fpms.platform.service.mysql.DirService;
import com.sinopec.fpms.platform.service.oss.OssService;
import com.sinopec.fpms.platform.service.redis.RedisCacheService;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.xslf.usermodel.XMLSlideShow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
import java.util.*;


/**
 * @description 生成PPT单页模式
 * @author wangying
 * @Date 14:08 2019/7/5
 * @param null
 * @since 1.0.0
 * @throws TODO
 */

@SuppressWarnings("ALL")
@Controller
@RequestMapping("/generatePPT")
public class GeneratePPTManagerController extends BaseController{
    @Autowired
    PPTManagerService pptManagerService;

    @Autowired
    private RedisCacheService redisCacheService;
    @Autowired
    private DirService dirService;
    @Autowired
    private OssService ossService;


    @Autowired
    private RedisTemplate<Object , Object> redisTemplate;

    public static final String CLASSPATH = "classpath:";
    public static final String ENPTY_STRING = "";
    public static final int ZERO = 0;
    public static final String TARGET = "\\target";
    public static final String RESOURCE_PATH = "\\src\\main\\resources\\pptmodel";
    public static final String PPT_SRC = "pptmodel\\";
    public static final String POINT = ".";
    public static final String ALLMODEL= "allmodel.pptx";

    /**
     * @description 获取chart类型产品信息
     * @author wangying
     * @Date 14:53 2019/7/11
     * @param id 数据库id
     * @since 1.0.0
     * @throws TODO
     */

    @PostMapping("fieldList/{id}")
    @ResponseBody
    @SysLog("生成PPT")
    public ResultMsg fieldList(@PathVariable(value = "id")Integer id)  {
        ResultMsg resultMsg = pptManagerService.fieldList(id);
        return resultMsg;
    }

    /**
     * @description
     * @author wangying
     * @Date 14:56 2019/7/11
     * @param vo 生成PPT所需参数
     * @since 1.0.0
     * @throws TODO
     */

    @PostMapping("/getppt")
    @ResponseBody
    @SysLog("生成PPT全部数据")
    public ResultMsg pptAllModelList( @RequestParam("data") String vo,HttpServletResponse response) throws IOException {
        List<AllData> allData = JSONArray.parseArray(vo, AllData.class);
        ResultMsg result = new ResultMsg();
        try {
            pptManagerService.pptAllList(allData,response);
            return result;
        } catch (Exception e) {
            result.setFlag(0);
            result.setThrowable(e);
            return result;
        }

    }

    @ApiOperation(value = "ppt模板上传", nickname = "/generatePPT/ppttemplate-upload")
    @PostMapping("/ppttemplate-upload")
    @ResponseBody
    public ResultMsg uploadPptTemplate(@RequestParam(value = "file", required = true) MultipartFile multipartFile) throws Exception {
        String fullName = multipartFile.getOriginalFilename();
        String suffix = fullName.substring(fullName.lastIndexOf(POINT));
        if (!".pptx".equals(suffix)) {
            throw new RuntimeException("上传文件格式不正确");
        }
        //上传文件到oss服务
        String ossFileId = UUID.randomUUID().toString() + "." + suffix;
        boolean uploadFileSuccess = ossService.uploadFile(ossFileId, multipartFile.getInputStream());
        if (!uploadFileSuccess) {
            throw new RuntimeException("上传文件至oss服务失败！");
        }

        //通过pptName
        List<T01File> list = dirService.getT01FileByFileName(ALLMODEL);

        //如果db为空，则新增
        if (CollectionUtils.isEmpty(list)) {
            T01File save = new T01File();
            save.setOssFileId(ossFileId);
            //原始文件名称
            save.setFilename(fullName);
            save.setFilename(ALLMODEL);
            save.setParentfileid(null);
            save.setSize((int) (multipartFile.getSize() / 1024));
            save.setFilepath(null);
            save.setFiletype(suffix);
            save.setUploaddate(new Date());
            save.setStatus("正常");
            save.setContentfulltext("");
            save.setKeyword("");
            save.setVersion("1");
            save.setIseffect("1");
            save.setCreationtime(new Date());
            save.setModifytime(null);
            save.setBrowsecount(0);
            save.setDowncount(0);
            save.setFavoritecount(0);
            save.setAttribute(null);
            save.setLevels(0);
            dirService.savaFile(save);
        } else {
            //db不为空，则根据FileId主键更新数据库中的ossFileId
            T01File update = new T01File();
            update.setFileid(list.get(0).getFileid());
            update.setUploaddate(new Date());
            update.setOssFileId(ossFileId);
            //文件版本+1
            update.setVersion(String.valueOf(Integer.valueOf(list.get(0).getVersion()) + 1));
            dirService.savaFile(update);
        }
        ResultMsg resultMsg = new ResultMsg();
        resultMsg.setFlag(1);
        return resultMsg;
    }

    @ApiOperation(value = "测试下载上传到oss服务的ppt模板", nickname = "/generatePPT/ppttemplate-download")
    @GetMapping("/ppttemplate-download")
    @ResponseBody
    public void uploadPptTemplate(HttpServletResponse response) throws Exception {
        //通过fileName获取db中ppt模板数据
        List<T01File> t01FileByFileName = dirService.getT01FileByFileName(GeneratePPTManagerController.ALLMODEL);
        if (CollectionUtils.isEmpty(t01FileByFileName)) {
            throw new RuntimeException("ppt模板不存在！");
        }
        InputStream pptFileInputStream = null;
        try {
            String ossFileId = t01FileByFileName.get(0).getOssFileId();

            //通过db中的数据获取ossFileId去oss服务下载文件
            // pptFileInputStream = ossService.downloadFile(t01FileByFileName.get(0).getOssFileId());
            File file = ossService.downloadFileToSave(ossFileId, ALLMODEL);
        } catch (Exception e) {
            throw new RuntimeException("获取ppt模板资源失败!");
        }
        // 以流的形式下载文件。
        pptFileInputStream = new BufferedInputStream(new FileInputStream("\\"+ALLMODEL));
        byte[] buffer = new byte[pptFileInputStream.available()];
        pptFileInputStream.read(buffer);
        pptFileInputStream.close();
        // 清空response
        response.reset();
        // 设置response的Header
        response.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(GeneratePPTManagerController.ALLMODEL, "UTF-8"));
        response.addHeader("Content-Length", "" + buffer.length);
        response.setContentType("application/octet-stream");

        OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
        toClient.write(buffer);
        toClient.flush();
        toClient.close();
    }


        /**
         * 文件上传到項目的类路径
         *
         * @param fileMultipart
         * @param fileName
         * @throws IOException
         */
    public static void upload2ClassPath(MultipartFile fileMultipart, String fileName) throws IOException {
        String fullName = fileMultipart.getOriginalFilename();
        String suffix = fullName.substring(fullName.lastIndexOf(POINT));
        if (!".pptx".equals(suffix)) {
            throw new RuntimeException("上传文件格式不正确");
        }
        //获取根目录
        File classpath = new File(ResourceUtils.getURL(CLASSPATH).getPath());
        if (!classpath.exists()) {
            classpath = new File(ENPTY_STRING);
        }
        //获取根目录的绝对路径D:\workspace\git\springbootstudy\blog\target\classes
        String absoluteClassPath = classpath.getAbsolutePath();

        //处理路径指定到Resources下面的静态资源位置：D:\workspace\git\springbootstudy\blog/src/main/resources/static/images/upload
        String srcImgDes = new StringBuffer()
                .append(absoluteClassPath.substring(ZERO, absoluteClassPath.indexOf(TARGET)))
                .append(RESOURCE_PATH).toString();
        //在target下新建文件目录
        File classImgDesPath = new File(absoluteClassPath, PPT_SRC);
        if (!classImgDesPath.exists() || !classImgDesPath.isDirectory()) {
            classImgDesPath.mkdirs();
        }

        //将文件分别上传到target下和Resources下指定位置
        transferPpt(fileMultipart, fileName, srcImgDes, classImgDesPath.getAbsolutePath());
    }

    /**
     * 上传文件
     *
     * @param file      文件流
     * @param fileName  文件名称
     * @param srcImgDes 待上传的文件目录s
     */
    public static void transferPpt(MultipartFile file, String fileName, String... srcPptDes) {
        for (String srcImgDes : srcPptDes) {
            //创建指定的静态资源目录
            File srcImgDesPath = new File(srcImgDes);
            if (!srcImgDesPath.exists() || !srcImgDesPath.isDirectory()) {
                srcImgDesPath.mkdirs();
            }
            //创建指定的静态资源目录文件
            File targetImgDes = new File(srcImgDesPath.getAbsolutePath(), fileName);
            if (!targetImgDes.exists()) {
                try {
                    targetImgDes.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            //保存文件到指定的静态资源目录中
            try {
                file.transferTo(targetImgDes);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
}

