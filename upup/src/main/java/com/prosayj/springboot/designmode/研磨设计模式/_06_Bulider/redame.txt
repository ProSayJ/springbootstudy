Bulider模式---又：构造器模式、生成器模式、

1、Product（要创建的复杂对象）：建立一个人物对象Person
2、Builder（给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建）：PersonBuilder
3、ConcreteBuilder（实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例）：ManBuilder
4、Director（调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建）：PersonDirector
5、测试

三、总结
在《Effective Java》书中第二条，就提到“遇到多个构造器参数时要考虑用构建器”，
其实这里的构建器就属于建造者模式，只是里面把四个角色都放到具体产品里面了。
而建造者模式主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；
由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。